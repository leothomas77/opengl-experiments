// Copyright 2011 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies.  Intel makes no representations about the
// suitability of this software for any purpose.  THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.


Adaptive Order Independent Transparency Demo (February 24th, 2011)
==================================================================
This application demonstrates the basic Adaptive Order Independent Transparency (AOIT) algorithm.

User Interaction
================
As with other DXSDK samples, use WASD with the mouse (click and drag) to fly around the scene.

Requirements for compilation
============================
1) Visual C++ 2010 
2) DirectX SDK (June 2010 or newer)

For execution
=============
1) Windows Vista or Windows 7 64 bit
2) DirectX 11 compatible video card 
3) Visual C++ 2010 Redistributable


AOIT Algorithm Overview
=======================
Adaptive Order Indepedent Transparency (AOIT) is a new technique for rendering correctly composited transparent geometry. 

The basic algorithm shares the same structure of an A-Buffer:

1) Render transparent geometry from the eye and store all transparent fragments in a per-pixel linked list
2) Read and process all fragments stored in a per-pixel linked list to generate a single fragment to be composited with the background

Unlike an A-Buffer AOIT doesn't try to spatially sort all fragments within a pixel in order to composite them in the right order. Instead each fragment is used to build a fixed-size 
(and therefore lossily compressed) visibility representation that enables correct compositing without requiring to process fragments in any particular order. 

AOIT can be seen as an high-performance resolve pass for A-buffer, in fact it is often over an order of magnitude faster than standard A-Buffer implementations on modern GPUs.

The entire AOIT HLSL code is stored in two files: AOIT.hlsl and AOIT_Resolve.hlsl. 
In particular check AOITInsertFragment() to see how new transparent fragments are inserted and (when necessary) automatically compressed in the approximate visibility function.


Known Issues
============
1) Missing transparent geometry. The application pre-allocats a GPU buffer to store each transparent fragment before compositing with the Adaptive Transaprency algorithm. 
   When the size of the buffer is not sufficient to contain all transparent fragments rendered in the scene the final image could be missing part of the transparent geometry.
   This issue can be addressed by splitting the screen in a number of tiles (2, 4..) and by rendering and compositing the transparent geometry for each tile with scissoring. 

UI
======

"F6" - toggle total rendering time/FPS
"F7" - toggle hair mesh HUD
"F8" - toggle all HUDs

"Transparency Method" - Select different transparency methods.
"AT Node Count" - Select the number of nodes that will be used to approximate the per-pixel visibility function.

"Models" - Add particles or hair to the scene

"Enable transparency" - Turn opaque geometry into transparent geometry. Use the "Geometry Alpha" slider to change the amount of transparency
"Enable stats" - display various real-time statistics for A-buffer and AT (does not work with alpha blending)
"Alpha cut-off" - enable alpha test


The "View Visibility Fn" buttons allows to display in real time the visibility function for each pixel and allow to compare the reference/uncompressed solution (A-buffer) with the approximated curve generated by Adaptive Transparency.
Use the mouse mid-button to select the pixel you want to inspect. Note that it doesn't work with alpha-blending and/or with opaque geometry.

Contacts
============
Please contact the authors via e-mail to ask questions, notify bugs, suggest improvements or even to just let us know you are using AT in your application. 
Your feedback is important to us!

Marco Salvi (marco.salvi@intel.com)
Jefferson Montgomery (jefferson.d.montgomery@intel.com)
Aaron Lefohn (aaron.lefohn@intel.com)
